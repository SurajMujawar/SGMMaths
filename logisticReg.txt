

# Commented out IPython magic to ensure Python compatibility.
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
import numpy as np
from sklearn.metrics import accuracy_score, precision_score,recall_score, f1_score


import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
# %matplotlib inline
digits = load_digits()

# print("image data shape", digits.data.shape)
# print("Label data Shape", digits.target.shape)


x_train , x_test , y_train , y_test = train_test_split(digits.data , digits.target , test_size = 0.23 , random_state =2)

# print(x_train.shape)

# print(x_test.shape)

# print(y_train.shape)

# print(y_test.shape)



scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)

# Increase the max_iter parameter
logisticReg = LogisticRegression(max_iter=1000)
logisticReg.fit(x_train_scaled, y_train)

print(logisticReg.predict(x_test[0].reshape(1,-1)))

logisticReg.predict(x_test[0:10])

y_pred = logisticReg.predict(x_test)

score = logisticReg.score(x_test ,y_test)
print(score)
precision = precision_score(y_test, y_pred, average='macro')
recall = recall_score(y_test, y_pred, average='macro')
f1 = f1_score(y_test, y_pred, average='macro')


print("Accuracy" ,accuracy)
print("precision",precision)
print("Recall", recall)
print("F1-score", f1)

